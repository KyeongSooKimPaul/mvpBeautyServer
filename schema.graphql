### This file was generated by Nexus Schema
### Do not make changes to this file directly


type AuthPayload {
  token: String
  user: User
}

type BeautyCategoryData {
  BeautyCategoryDataImages(after: BeautyCategoryDataImagesWhereUniqueInput, before: BeautyCategoryDataImagesWhereUniqueInput, first: Int, last: Int): [BeautyCategoryDataImages!]!
  createdAt: DateTime!
  id: Int!
  title: String
  userId: Int
}

type BeautyCategoryDataDetails {
  BeautyCategoryDataDetailsContents(after: BeautyCategoryDataDetailsContentsWhereUniqueInput, before: BeautyCategoryDataDetailsContentsWhereUniqueInput, first: Int, last: Int): [BeautyCategoryDataDetailsContents!]!
  BeautyCategoryDataDetailsImages(after: BeautyCategoryDataDetailsImagesWhereUniqueInput, before: BeautyCategoryDataDetailsImagesWhereUniqueInput, first: Int, last: Int): [BeautyCategoryDataDetailsImages!]!
  beautyDetailId: Int!
  createdAt: DateTime!
  id: Int!
  url: String
  userId: Int
}

type BeautyCategoryDataDetailsContents {
  beautyDetailImageId: Int!
  contents: String
  createdAt: DateTime!
  id: Int!
  userId: Int
}

input BeautyCategoryDataDetailsContentsListRelationFilter {
  every: BeautyCategoryDataDetailsContentsWhereInput
  none: BeautyCategoryDataDetailsContentsWhereInput
  some: BeautyCategoryDataDetailsContentsWhereInput
}

input BeautyCategoryDataDetailsContentsWhereInput {
  AND: [BeautyCategoryDataDetailsContentsWhereInput!]
  BeautyCategoryDataDetails: BeautyCategoryDataDetailsWhereInput
  beautyDetailImageId: IntFilter
  contents: StringNullableFilter
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [BeautyCategoryDataDetailsContentsWhereInput!]
  OR: [BeautyCategoryDataDetailsContentsWhereInput!]
  User: UserWhereInput
  userId: IntNullableFilter
}

input BeautyCategoryDataDetailsContentsWhereUniqueInput {
  id: Int
}

type BeautyCategoryDataDetailsImages {
  beautyDetailImageId: Int!
  createdAt: DateTime!
  id: Int!
  url: String
  userId: Int
}

input BeautyCategoryDataDetailsImagesListRelationFilter {
  every: BeautyCategoryDataDetailsImagesWhereInput
  none: BeautyCategoryDataDetailsImagesWhereInput
  some: BeautyCategoryDataDetailsImagesWhereInput
}

input BeautyCategoryDataDetailsImagesWhereInput {
  AND: [BeautyCategoryDataDetailsImagesWhereInput!]
  BeautyCategoryDataDetails: BeautyCategoryDataDetailsWhereInput
  beautyDetailImageId: IntFilter
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [BeautyCategoryDataDetailsImagesWhereInput!]
  OR: [BeautyCategoryDataDetailsImagesWhereInput!]
  url: StringNullableFilter
  User: UserWhereInput
  userId: IntNullableFilter
}

input BeautyCategoryDataDetailsImagesWhereUniqueInput {
  id: Int
}

input BeautyCategoryDataDetailsListRelationFilter {
  every: BeautyCategoryDataDetailsWhereInput
  none: BeautyCategoryDataDetailsWhereInput
  some: BeautyCategoryDataDetailsWhereInput
}

input BeautyCategoryDataDetailsWhereInput {
  AND: [BeautyCategoryDataDetailsWhereInput!]
  BeautyCategoryDataDetailsContents: BeautyCategoryDataDetailsContentsListRelationFilter
  BeautyCategoryDataDetailsImages: BeautyCategoryDataDetailsImagesListRelationFilter
  BeautyCategoryDataImages: BeautyCategoryDataImagesWhereInput
  beautyDetailId: IntFilter
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [BeautyCategoryDataDetailsWhereInput!]
  OR: [BeautyCategoryDataDetailsWhereInput!]
  url: StringNullableFilter
  User: UserWhereInput
  userId: IntNullableFilter
}

input BeautyCategoryDataDetailsWhereUniqueInput {
  id: Int
}

type BeautyCategoryDataImages {
  BeautyCategoryData: BeautyCategoryData!
  BeautyCategoryDataDetails(after: BeautyCategoryDataDetailsWhereUniqueInput, before: BeautyCategoryDataDetailsWhereUniqueInput, first: Int, last: Int): [BeautyCategoryDataDetails!]!
  beautyId: Int!
  BeautyLikesUser(after: BeautyLikesUserWhereUniqueInput, before: BeautyLikesUserWhereUniqueInput, first: Int, last: Int): [BeautyLikesUser!]!
  brandName: String
  createdAt: DateTime!
  finalPrice: String
  id: Int!
  originalPrice: String
  RecentlyViewd(after: RecentlyViewdWhereUniqueInput, before: RecentlyViewdWhereUniqueInput, first: Int, last: Int): [RecentlyViewd!]!
  subtitle: String
  title: String
  url: String
  userId: Int
}

input BeautyCategoryDataImagesListRelationFilter {
  every: BeautyCategoryDataImagesWhereInput
  none: BeautyCategoryDataImagesWhereInput
  some: BeautyCategoryDataImagesWhereInput
}

input BeautyCategoryDataImagesWhereInput {
  AND: [BeautyCategoryDataImagesWhereInput!]
  BeautyCategoryData: BeautyCategoryDataWhereInput
  BeautyCategoryDataDetails: BeautyCategoryDataDetailsListRelationFilter
  beautyId: IntFilter
  BeautyLikesUser: BeautyLikesUserListRelationFilter
  brandName: StringNullableFilter
  createdAt: DateTimeFilter
  finalPrice: StringNullableFilter
  id: IntFilter
  NOT: [BeautyCategoryDataImagesWhereInput!]
  OR: [BeautyCategoryDataImagesWhereInput!]
  originalPrice: StringNullableFilter
  RecentlyViewd: RecentlyViewdListRelationFilter
  subtitle: StringNullableFilter
  title: StringNullableFilter
  url: StringNullableFilter
  User: UserWhereInput
  userId: IntNullableFilter
}

input BeautyCategoryDataImagesWhereUniqueInput {
  id: Int
}

input BeautyCategoryDataListRelationFilter {
  every: BeautyCategoryDataWhereInput
  none: BeautyCategoryDataWhereInput
  some: BeautyCategoryDataWhereInput
}

type BeautyCategoryDataPayload {
  beautyCategoryData: BeautyCategoryData
  user: User
}

input BeautyCategoryDataWhereInput {
  AND: [BeautyCategoryDataWhereInput!]
  BeautyCategoryDataImages: BeautyCategoryDataImagesListRelationFilter
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [BeautyCategoryDataWhereInput!]
  OR: [BeautyCategoryDataWhereInput!]
  title: StringNullableFilter
  User: UserWhereInput
  userId: IntNullableFilter
}

input BeautyCategoryDataWhereUniqueInput {
  id: Int
}

type BeautyLikesUser {
  BeautyCategoryDataImages: BeautyCategoryDataImages!
  boardId: Int!
  id: Int!
  likedAt: DateTime!
  userId: Int
}

input BeautyLikesUserListRelationFilter {
  every: BeautyLikesUserWhereInput
  none: BeautyLikesUserWhereInput
  some: BeautyLikesUserWhereInput
}

input BeautyLikesUserWhereInput {
  AND: [BeautyLikesUserWhereInput!]
  BeautyCategoryDataImages: BeautyCategoryDataImagesWhereInput
  boardId: IntFilter
  id: IntFilter
  likedAt: DateTimeFilter
  NOT: [BeautyLikesUserWhereInput!]
  OR: [BeautyLikesUserWhereInput!]
  User: UserWhereInput
  userId: IntNullableFilter
}

input BeautyLikesUserWhereUniqueInput {
  id: Int
}

type Board {
  contents: String
  createdAt: DateTime!
  id: Int!
  images: String
  likes: String
  LikesUser(after: LikesUserWhereUniqueInput, before: LikesUserWhereUniqueInput, first: Int, last: Int): [LikesUser!]!
  title: String
  User: User
  userId: Int
}

input BoardListRelationFilter {
  every: BoardWhereInput
  none: BoardWhereInput
  some: BoardWhereInput
}

input BoardWhereInput {
  AND: [BoardWhereInput!]
  contents: StringNullableFilter
  createdAt: DateTimeFilter
  id: IntFilter
  images: StringNullableFilter
  likes: StringNullableFilter
  LikesUser: LikesUserListRelationFilter
  NOT: [BoardWhereInput!]
  OR: [BoardWhereInput!]
  title: StringNullableFilter
  User: UserWhereInput
  userId: IntNullableFilter
}

input BoardWhereUniqueInput {
  id: Int
}

input ChangepointListRelationFilter {
  every: ChangepointWhereInput
  none: ChangepointWhereInput
  some: ChangepointWhereInput
}

input ChangepointWhereInput {
  AND: [ChangepointWhereInput!]
  checkstatus: StringNullableFilter
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [ChangepointWhereInput!]
  OR: [ChangepointWhereInput!]
  price: StringNullableFilter
  User: UserWhereInput
  userId: IntNullableFilter
}

type Chat {
  createdAt: DateTime!
  id: Int!
  message: String!
  receiver: User!
  receiverId: Int!
  sender: User!
  senderId: Int!
  updatedAt: DateTime!
}

input ChatListRelationFilter {
  every: ChatWhereInput
  none: ChatWhereInput
  some: ChatWhereInput
}

input ChatWhereInput {
  AND: [ChatWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  message: StringFilter
  NOT: [ChatWhereInput!]
  OR: [ChatWhereInput!]
  receiver: UserWhereInput
  receiverId: IntFilter
  sender: UserWhereInput
  senderId: IntFilter
  updatedAt: DateTimeFilter
}

input ChatWhereUniqueInput {
  id: Int
}

input CheckpointListRelationFilter {
  every: CheckpointWhereInput
  none: CheckpointWhereInput
  some: CheckpointWhereInput
}

input CheckpointWhereInput {
  AND: [CheckpointWhereInput!]
  checkstatus: StringNullableFilter
  createdAt: DateTimeFilter
  id: IntFilter
  image: StringNullableFilter
  marketname: StringNullableFilter
  NOT: [CheckpointWhereInput!]
  OR: [CheckpointWhereInput!]
  price: StringNullableFilter
  User: UserWhereInput
  userId: IntNullableFilter
}

type Comment {
  Comment: Comment
  commentId: Int
  content: String
  createdAt: DateTime!
  id: Int!
  User: User
}

input CommentListRelationFilter {
  every: CommentWhereInput
  none: CommentWhereInput
  some: CommentWhereInput
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  boardId: IntNullableFilter
  Comment: CommentWhereInput
  commentId: IntNullableFilter
  comments: CommentListRelationFilter
  content: StringNullableFilter
  createdAt: DateTimeFilter
  id: IntFilter
  MvpFreeBoard: MvpFreeBoardWhereInput
  NOT: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  User: UserWhereInput
  userId: IntNullableFilter
}

input CommentWhereUniqueInput {
  id: Int
}

scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

type Findcategory {
  categoryList: String
}

type Hashtag {
  boardId: Int
  content: String
  id: Int!
  MvpFreeBoard: MvpFreeBoard
  userId: Int
}

input HashtagListRelationFilter {
  every: HashtagWhereInput
  none: HashtagWhereInput
  some: HashtagWhereInput
}

input HashtagWhereInput {
  AND: [HashtagWhereInput!]
  boardId: IntNullableFilter
  content: StringNullableFilter
  createdAt: DateTimeFilter
  id: IntFilter
  MvpFreeBoard: MvpFreeBoardWhereInput
  NOT: [HashtagWhereInput!]
  OR: [HashtagWhereInput!]
  User: UserWhereInput
  userId: IntNullableFilter
}

input HashtagWhereUniqueInput {
  id: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

type KeepOrder {
  createdAt: DateTime!
  demandproductKeepQty: String!
  id: Int!
  messagefromadmin: String!
  messagefromcustomer: String!
  orderaddress: String!
  orderId: String
  paidstatus: String!
  productId: String
  productKeepQty: String
  productName: String
  productPrice: String
  productQty: String
  User: User
  userId: Int
}

input KeepOrderListRelationFilter {
  every: KeepOrderWhereInput
  none: KeepOrderWhereInput
  some: KeepOrderWhereInput
}

input KeepOrderWhereInput {
  AND: [KeepOrderWhereInput!]
  createdAt: DateTimeFilter
  demandproductKeepQty: StringFilter
  id: IntFilter
  messagefromadmin: StringFilter
  messagefromcustomer: StringFilter
  NOT: [KeepOrderWhereInput!]
  OR: [KeepOrderWhereInput!]
  orderaddress: StringFilter
  orderId: StringNullableFilter
  paidstatus: StringFilter
  productId: StringNullableFilter
  productKeepQty: StringNullableFilter
  productName: StringNullableFilter
  productPrice: StringNullableFilter
  productQty: StringNullableFilter
  User: UserWhereInput
  userId: IntNullableFilter
}

input KeepOrderWhereUniqueInput {
  id: Int
}

type Keepstatus {
  createdAt: DateTime!
  id: Int!
  keepId: Int!
  Ordermanageitems: Ordermanageitems!
  productId: String
  productKeepQty: String
  productName: String
  productPrice: String
  productQty: String
  User: User
  userId: Int
}

input KeepstatusListRelationFilter {
  every: KeepstatusWhereInput
  none: KeepstatusWhereInput
  some: KeepstatusWhereInput
}

input KeepstatusWhereInput {
  AND: [KeepstatusWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  keepId: IntFilter
  NOT: [KeepstatusWhereInput!]
  OR: [KeepstatusWhereInput!]
  Ordermanageitems: OrdermanageitemsWhereInput
  productId: StringNullableFilter
  productKeepQty: StringNullableFilter
  productName: StringNullableFilter
  productPrice: StringNullableFilter
  productQty: StringNullableFilter
  User: UserWhereInput
  userId: IntNullableFilter
}

input KeepstatusWhereUniqueInput {
  id: Int
}

type LikesUser {
  Board: Board!
  boardId: Int!
  id: Int!
  likedAt: DateTime!
  userId: Int
}

input LikesUserListRelationFilter {
  every: LikesUserWhereInput
  none: LikesUserWhereInput
  some: LikesUserWhereInput
}

input LikesUserWhereInput {
  AND: [LikesUserWhereInput!]
  Board: BoardWhereInput
  boardId: IntFilter
  id: IntFilter
  likedAt: DateTimeFilter
  NOT: [LikesUserWhereInput!]
  OR: [LikesUserWhereInput!]
  User: UserWhereInput
  userId: IntNullableFilter
}

input LikesUserWhereUniqueInput {
  id: Int
}

type Mutation {
  beautydeleteLike(id: Int!): BeautyLikesUser
  beautylikesUser(id: Int, userId: Int): BeautyLikesUser
  changeuseralways(always: String, id: Int): Product
  changeuserapprove(approved: String, id: Int): User
  createBeautyCategoryData(title: String): BeautyCategoryData
  createBeautyCategoryDataDetails(id: Int, url: String): BeautyCategoryDataDetails
  createBeautyCategoryDataDetailsContents(contents: String, id: Int): BeautyCategoryDataDetailsContents
  createBeautyCategoryDataDetailsImages(id: Int, url: String): BeautyCategoryDataDetailsImages
  createBeautyCategoryDataImages(brandName: String!, finalPrice: String!, originalPrice: String!, subtitle: String!, title: String!, url: String!): BeautyCategoryDataImages
  createBoard(contents: String, images: String, likes: String, title: String): Board
  createChat(message: String!, receiverId: Int!, senderId: Int!): Chat
  createComment(content: String!, id: Int!): Comment
  createKeeporder(demandproductKeepQty: String, messagefromadmin: String, messagefromcustomer: String, orderaddress: String, orderId: String, productId: String, productKeepQty: String, productName: String, productPrice: String, productQty: String): KeepOrder
  createKeepstatus(id: Int, productId: String, productKeepQty: String, productName: String, productPrice: String, productQty: String): Keepstatus
  createmvpfreeProduct(brand: String, category: String, description: String, discount: Int, images: String, newproduct: String, price: Int, productpageId: Int, sale: String, stock: String, title: String, type: String, userId: Int, variants: String): MvpFreeProduct
  createOrder(item_price: String, keepingamount: String, messagefromcustomer: String, multiorder: String, name: String, orderaddress: String, paidstatus: String, product_main_image: String, productid: Int, shipping_amount: String, shippingfee: String, updated_at: String, wholeamount: String): Ordermanageitems
  createPaidorderlist(category: String, discount: String, id: Int, images: String, keepingamount: String, orderstatus: String, price: String, productid: Int, shipping_amount: String, title: String, updated_at: String, userId: Int, wholeamount: String): Paidproductlist
  createProduct(brand: String, category: String, description: String, discount: Int, images: String, newproduct: String, price: Int, productpageId: Int, sale: String, stock: String, title: String, type: String, userId: Int, variants: String): Product
  createReply(commentId: Int, content: String!, id: Int!): Comment
  cretecategory(name: String): ProductCategory
  cretemvpfreecategory(name: String): MvpFreeProductCategory
  deletecategory(id: Int!): ProductCategory
  deleteChat(messageId: Int!): Chat
  deleteLike(id: Int!, userId: Int): LikesUser
  deletemvpfreecategory(id: Int!): MvpFreeProductCategory
  likesUser(id: Int, userId: Int): LikesUser
  login(email: String!, password: String!): AuthPayload
  loginKakao(email: String!): AuthPayload
  mvpfreechangeuseralways(always: String, id: Int): MvpFreeProduct
  mvpFreecreateBoard(contents: String, images: String, likes: String, title: String): MvpFreeBoard
  mvpFreedeleteLike(id: Int!): MvpFreeLikesUser
  mvpFreelikesUser(id: Int): MvpFreeLikesUser
  productpagemutation(id: Int): Productpage
  recentlyViewd(id: Int, userId: Int): RecentlyViewd
  signup(address: String, businesscard: String, email: String, isKakaoSavedId: String, name: String, password: String, phonenumber: String, recommendname: String, recommendphonenumber: String, sample1name: String, sample1phonenumber: String, sample2name: String, sample2phonenumber: String): AuthPayload
  updateChat(message: String!, messageId: Int!): Chat
  updatekeepOrder(id: Int, paidstatus: String): KeepOrder
  updateKeeporder(demandproductKeepQty: String, id: Int, messagefromadmin: String, messagefromcustomer: String, orderId: String, productId: String, productKeepQty: String, productName: String, productPrice: String, productQty: String): KeepOrder
  updateKeepstatus(id: Int, messagefromcustomer: String, orderaddress: String, productKeepQty: String): Keepstatus
  updatemvpfreeProduct(brand: String, category: String, description: String, discount: Int, id: Int, images: String, newproduct: String, price: Int, sale: String, stock: String, title: String, type: String, variants: String): MvpFreeProduct
  updateOrder(id: Int, paidstatus: String): Ordermanageitems
  updatepassword(id: Int, password: String): User
  updatesingleproduct(brand: String, category: String, description: String, discount: Int, id: Int, images: String, newproduct: String, price: Int, sale: String, stock: String, title: String, type: String, variants: String): Product
  Userbyemail(email: String): User
}

type MvpFreeBoard {
  comments(after: CommentWhereUniqueInput, before: CommentWhereUniqueInput, first: Int, last: Int): [Comment!]!
  contents: String
  createdAt: DateTime!
  Hashtag(after: HashtagWhereUniqueInput, before: HashtagWhereUniqueInput, first: Int, last: Int): [Hashtag!]!
  id: Int!
  images: String
  likes: String
  MvpFreeLikesUser(after: MvpFreeLikesUserWhereUniqueInput, before: MvpFreeLikesUserWhereUniqueInput, first: Int, last: Int): [MvpFreeLikesUser!]!
  title: String
  User: User
  userId: Int
}

input MvpFreeBoardListRelationFilter {
  every: MvpFreeBoardWhereInput
  none: MvpFreeBoardWhereInput
  some: MvpFreeBoardWhereInput
}

input MvpFreeBoardWhereInput {
  AND: [MvpFreeBoardWhereInput!]
  comments: CommentListRelationFilter
  contents: StringNullableFilter
  createdAt: DateTimeFilter
  Hashtag: HashtagListRelationFilter
  id: IntFilter
  images: StringNullableFilter
  likes: StringNullableFilter
  MvpFreeLikesUser: MvpFreeLikesUserListRelationFilter
  NOT: [MvpFreeBoardWhereInput!]
  OR: [MvpFreeBoardWhereInput!]
  title: StringNullableFilter
  User: UserWhereInput
  userId: IntNullableFilter
}

input MvpFreeBoardWhereUniqueInput {
  id: Int
}

type MvpFreeLikesUser {
  boardId: Int!
  id: Int!
  likedAt: DateTime!
  MvpFreeBoard: MvpFreeBoard!
  userId: Int
}

input MvpFreeLikesUserListRelationFilter {
  every: MvpFreeLikesUserWhereInput
  none: MvpFreeLikesUserWhereInput
  some: MvpFreeLikesUserWhereInput
}

input MvpFreeLikesUserWhereInput {
  AND: [MvpFreeLikesUserWhereInput!]
  boardId: IntFilter
  id: IntFilter
  likedAt: DateTimeFilter
  MvpFreeBoard: MvpFreeBoardWhereInput
  NOT: [MvpFreeLikesUserWhereInput!]
  OR: [MvpFreeLikesUserWhereInput!]
  User: UserWhereInput
  userId: IntNullableFilter
}

input MvpFreeLikesUserWhereUniqueInput {
  id: Int
}

type MvpFreeProduct {
  always: String!
  brand: String!
  category: String!
  createdAt: DateTime!
  description: String!
  discount: Int!
  id: Int!
  images: String!
  newproduct: String!
  price: Int!
  productpageId: Int
  sale: String!
  stock: String!
  title: String!
  totalcount: Int
  type: String!
  userId: Int
  variants: String!
}

type MvpFreeProductCategory {
  createdAt: DateTime!
  id: Int!
  name: String
}

input MvpFreeProductCategoryListRelationFilter {
  every: MvpFreeProductCategoryWhereInput
  none: MvpFreeProductCategoryWhereInput
  some: MvpFreeProductCategoryWhereInput
}

input MvpFreeProductCategoryWhereInput {
  AND: [MvpFreeProductCategoryWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  name: StringNullableFilter
  NOT: [MvpFreeProductCategoryWhereInput!]
  OR: [MvpFreeProductCategoryWhereInput!]
  User: UserWhereInput
  userId: IntNullableFilter
}

input MvpFreeProductCategoryWhereUniqueInput {
  id: Int
}

input MvpFreeProductListRelationFilter {
  every: MvpFreeProductWhereInput
  none: MvpFreeProductWhereInput
  some: MvpFreeProductWhereInput
}

input MvpFreeProductOrderByInput {
  always: SortOrder
  brand: SortOrder
  category: SortOrder
  createdAt: SortOrder
  description: SortOrder
  discount: SortOrder
  id: SortOrder
  images: SortOrder
  newproduct: SortOrder
  price: SortOrder
  productpageId: SortOrder
  sale: SortOrder
  stock: SortOrder
  title: SortOrder
  type: SortOrder
  userId: SortOrder
  variants: SortOrder
}

type MvpFreeProductpage {
  id: Int!
  MvpFreeProduct(after: MvpFreeProductWhereUniqueInput, before: MvpFreeProductWhereUniqueInput, first: Int, last: Int, orderBy: [MvpFreeProductOrderByInput!], where: MvpFreeProductWhereInput): [MvpFreeProduct!]!
  text: String!
}

input MvpFreeProductpageWhereInput {
  AND: [MvpFreeProductpageWhereInput!]
  id: IntFilter
  MvpFreeProduct: MvpFreeProductListRelationFilter
  NOT: [MvpFreeProductpageWhereInput!]
  OR: [MvpFreeProductpageWhereInput!]
  text: StringFilter
}

input MvpFreeProductWhereInput {
  always: StringFilter
  AND: [MvpFreeProductWhereInput!]
  brand: StringFilter
  category: StringFilter
  createdAt: DateTimeFilter
  description: StringFilter
  discount: IntFilter
  id: IntFilter
  images: StringFilter
  MvpFreeProductpage: MvpFreeProductpageWhereInput
  newproduct: StringFilter
  NOT: [MvpFreeProductWhereInput!]
  OR: [MvpFreeProductWhereInput!]
  price: IntFilter
  productpageId: IntNullableFilter
  sale: StringFilter
  stock: StringFilter
  title: StringFilter
  type: StringFilter
  User: UserWhereInput
  userId: IntNullableFilter
  variants: StringFilter
}

input MvpFreeProductWhereUniqueInput {
  id: Int
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Ordermanageitems {
  created_at: String
  createdAt: DateTime!
  id: Int!
  item_price: String
  keepingamount: String
  Keepstatus(after: KeepstatusWhereUniqueInput, before: KeepstatusWhereUniqueInput, first: Int, last: Int): [Keepstatus!]!
  messagefromadmin: String!
  messagefromcustomer: String!
  multiorder: String
  name: String
  orderaddress: String!
  paidstatus: String
  product_main_image: String
  productid: Int
  shipping_amount: String
  shippingfee: String!
  updated_at: String
  User: User
  userId: Int
  wholeamount: String
}

input OrdermanageitemsListRelationFilter {
  every: OrdermanageitemsWhereInput
  none: OrdermanageitemsWhereInput
  some: OrdermanageitemsWhereInput
}

input OrdermanageitemsWhereInput {
  AND: [OrdermanageitemsWhereInput!]
  created_at: StringNullableFilter
  createdAt: DateTimeFilter
  id: IntFilter
  item_price: StringNullableFilter
  keepingamount: StringNullableFilter
  Keepstatus: KeepstatusListRelationFilter
  messagefromadmin: StringFilter
  messagefromcustomer: StringFilter
  multiorder: StringNullableFilter
  name: StringNullableFilter
  NOT: [OrdermanageitemsWhereInput!]
  OR: [OrdermanageitemsWhereInput!]
  orderaddress: StringFilter
  paidstatus: StringNullableFilter
  product_main_image: StringNullableFilter
  productid: IntNullableFilter
  shipping_amount: StringNullableFilter
  shippingfee: StringFilter
  updated_at: StringNullableFilter
  User: UserWhereInput
  userId: IntNullableFilter
  wholeamount: StringNullableFilter
}

input OrdermanageitemsWhereUniqueInput {
  id: Int
}

type Paidproductlist {
  category: String
  createdAt: DateTime!
  discount: String
  id: Int!
  images: String
  keepingamount: String
  orderstatus: String
  price: String
  productid: Int
  shipping_amount: String
  title: String
  updated_at: String
  User: User
  userId: Int
  wholeamount: String
}

input PaidproductlistListRelationFilter {
  every: PaidproductlistWhereInput
  none: PaidproductlistWhereInput
  some: PaidproductlistWhereInput
}

input PaidproductlistWhereInput {
  AND: [PaidproductlistWhereInput!]
  category: StringNullableFilter
  createdAt: DateTimeFilter
  discount: StringNullableFilter
  id: IntFilter
  images: StringNullableFilter
  keepingamount: StringNullableFilter
  NOT: [PaidproductlistWhereInput!]
  OR: [PaidproductlistWhereInput!]
  orderstatus: StringNullableFilter
  price: StringNullableFilter
  productid: IntNullableFilter
  shipping_amount: StringNullableFilter
  title: StringNullableFilter
  updated_at: StringNullableFilter
  User: UserWhereInput
  userId: IntNullableFilter
  wholeamount: StringNullableFilter
}

input PaidproductlistWhereUniqueInput {
  id: Int
}

type Product {
  always: String!
  brand: String!
  category: String!
  createdAt: DateTime!
  description: String!
  discount: Int!
  id: Int!
  images: String!
  newproduct: String!
  price: Int!
  productpageId: Int
  sale: String!
  stock: String!
  title: String!
  type: String!
  userId: Int
  variants: String!
}

type ProductCategory {
  createdAt: DateTime!
  id: Int!
  name: String
}

input ProductCategoryListRelationFilter {
  every: ProductCategoryWhereInput
  none: ProductCategoryWhereInput
  some: ProductCategoryWhereInput
}

input ProductCategoryWhereInput {
  AND: [ProductCategoryWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  name: StringNullableFilter
  NOT: [ProductCategoryWhereInput!]
  OR: [ProductCategoryWhereInput!]
  User: UserWhereInput
  userId: IntNullableFilter
}

input ProductCategoryWhereUniqueInput {
  id: Int
}

input ProductListRelationFilter {
  every: ProductWhereInput
  none: ProductWhereInput
  some: ProductWhereInput
}

input ProductOrderByInput {
  always: SortOrder
  brand: SortOrder
  category: SortOrder
  createdAt: SortOrder
  description: SortOrder
  discount: SortOrder
  id: SortOrder
  images: SortOrder
  newproduct: SortOrder
  price: SortOrder
  productpageId: SortOrder
  sale: SortOrder
  stock: SortOrder
  title: SortOrder
  type: SortOrder
  userId: SortOrder
  variants: SortOrder
}

type Productpage {
  id: Int!
  Product(after: ProductWhereUniqueInput, before: ProductWhereUniqueInput, first: Int, last: Int, orderBy: [ProductOrderByInput!], where: ProductWhereInput): [Product!]!
  text: String!
}

input ProductpageWhereInput {
  AND: [ProductpageWhereInput!]
  id: IntFilter
  NOT: [ProductpageWhereInput!]
  OR: [ProductpageWhereInput!]
  Product: ProductListRelationFilter
  text: StringFilter
}

type ProductsPayload {
  mvpFreeProduct: [MvpFreeProduct]
  totalcount: Int
}

type Productupdate {
  id: Int!
  postfix: String
  prefix: String
  userId: Int
}

input ProductupdateListRelationFilter {
  every: ProductupdateWhereInput
  none: ProductupdateWhereInput
  some: ProductupdateWhereInput
}

input ProductupdateWhereInput {
  AND: [ProductupdateWhereInput!]
  createdAt: DateTimeFilter
  id: IntFilter
  NOT: [ProductupdateWhereInput!]
  OR: [ProductupdateWhereInput!]
  postfix: StringNullableFilter
  prefix: StringNullableFilter
  User: UserWhereInput
  userId: IntNullableFilter
}

input ProductupdateWhereUniqueInput {
  id: Int
}

input ProductWhereInput {
  always: StringFilter
  AND: [ProductWhereInput!]
  brand: StringFilter
  category: StringFilter
  createdAt: DateTimeFilter
  description: StringFilter
  discount: IntFilter
  id: IntFilter
  images: StringFilter
  newproduct: StringFilter
  NOT: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  price: IntFilter
  Productpage: ProductpageWhereInput
  productpageId: IntNullableFilter
  sale: StringFilter
  stock: StringFilter
  title: StringFilter
  type: StringFilter
  User: UserWhereInput
  userId: IntNullableFilter
  variants: StringFilter
}

input ProductWhereUniqueInput {
  id: Int
}

type Profile {
  avatar: String
  bio: String
  id: Int!
  location: String
  website: String
}

input ProfileListRelationFilter {
  every: ProfileWhereInput
  none: ProfileWhereInput
  some: ProfileWhereInput
}

input ProfileWhereInput {
  AND: [ProfileWhereInput!]
  avatar: StringNullableFilter
  bio: StringNullableFilter
  createdAt: DateTimeFilter
  id: IntFilter
  location: StringNullableFilter
  NOT: [ProfileWhereInput!]
  OR: [ProfileWhereInput!]
  User: UserWhereInput
  userId: IntNullableFilter
  website: StringNullableFilter
}

input ProfileWhereUniqueInput {
  id: Int
}

type Query {
  allBeautyCategoryData: [BeautyCategoryData]
  boardquery: [Board]
  boardquerybyid(id: Int): Board
  categories: [ProductCategory]
  chatmantoman(receiverId: Int!, senderId: Int!): [Chat]
  keepdatabyorderid(keepId: Int): [Keepstatus]
  keepdemanddatabyorderid(id: Int): [KeepOrder]
  keepOrderlist: [KeepOrder]
  keepOrderPaidlist: [KeepOrder]
  me: User
  mvpFreeboardquery: [MvpFreeBoard]
  mvpFreeboardquerybyid(id: Int): MvpFreeBoard
  mvpfreecategories: [MvpFreeProductCategory]
  mvpFreeProduct(id: Int): MvpFreeProduct
  mvpfreeproductpage(id: Int): MvpFreeProductpage
  mvpFreeProducts(always: String, category: String, skip: Int, take: Int): ProductsPayload
  orders: [Ordermanageitems]
  ordersbyorderid(id: Int): [Ordermanageitems]
  ordersbyuserid(userId: Int): [Ordermanageitems]
  paidorderbyid(id: Int): [Paidproductlist]
  paidorders: [Ordermanageitems]
  product(id: Int): Product
  productpage(id: Int): Productpage
  user(id: Int): User
  UserbyKakao(isKakaoSavedId: String): User
  users: [User]
}

enum QueryMode {
  default
  insensitive
}

type RecentlyViewd {
  BeautyCategoryDataImages: BeautyCategoryDataImages!
  boardId: Int!
  id: Int!
  userId: Int
  viewedAt: DateTime!
}

input RecentlyViewdListRelationFilter {
  every: RecentlyViewdWhereInput
  none: RecentlyViewdWhereInput
  some: RecentlyViewdWhereInput
}

input RecentlyViewdWhereInput {
  AND: [RecentlyViewdWhereInput!]
  BeautyCategoryDataImages: BeautyCategoryDataImagesWhereInput
  boardId: IntFilter
  id: IntFilter
  NOT: [RecentlyViewdWhereInput!]
  OR: [RecentlyViewdWhereInput!]
  User: UserWhereInput
  userId: IntNullableFilter
  viewedAt: DateTimeFilter
}

input RecentlyViewdWhereUniqueInput {
  id: Int
}

enum SortOrder {
  asc
  desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

type Subscription {
  """Subscription For Chats"""
  Chat(receiverId: Int, senderId: Int): SubscriptionPayload

  """Subscription For Chats"""
  User: SubscriptionMainPayload
}

type SubscriptionMainPayload {
  mutation: String
  userData: User
}

type SubscriptionPayload {
  message: Chat
  mutation: String
}

type User {
  address: String!
  approved: String!
  BeautyCategoryData(after: BeautyCategoryDataWhereUniqueInput, before: BeautyCategoryDataWhereUniqueInput, first: Int, last: Int): [BeautyCategoryData!]!
  BeautyCategoryDataDetails(after: BeautyCategoryDataDetailsWhereUniqueInput, before: BeautyCategoryDataDetailsWhereUniqueInput, first: Int, last: Int): [BeautyCategoryDataDetails!]!
  BeautyCategoryDataDetailsContents(after: BeautyCategoryDataDetailsContentsWhereUniqueInput, before: BeautyCategoryDataDetailsContentsWhereUniqueInput, first: Int, last: Int): [BeautyCategoryDataDetailsContents!]!
  BeautyCategoryDataDetailsImages(after: BeautyCategoryDataDetailsImagesWhereUniqueInput, before: BeautyCategoryDataDetailsImagesWhereUniqueInput, first: Int, last: Int): [BeautyCategoryDataDetailsImages!]!
  BeautyCategoryDataImages(after: BeautyCategoryDataImagesWhereUniqueInput, before: BeautyCategoryDataImagesWhereUniqueInput, first: Int, last: Int): [BeautyCategoryDataImages!]!
  BeautyLikesUser(after: BeautyLikesUserWhereUniqueInput, before: BeautyLikesUserWhereUniqueInput, first: Int, last: Int): [BeautyLikesUser!]!
  Board(after: BoardWhereUniqueInput, before: BoardWhereUniqueInput, first: Int, last: Int): [Board!]!
  businesscard: String!
  comments(after: CommentWhereUniqueInput, before: CommentWhereUniqueInput, first: Int, last: Int): [Comment!]!
  createdAt: DateTime!
  deposit: String!
  email: String!
  Hashtag(after: HashtagWhereUniqueInput, before: HashtagWhereUniqueInput, first: Int, last: Int): [Hashtag!]!
  id: Int!
  isKakaoSavedId: String!
  KeepOrder(after: KeepOrderWhereUniqueInput, before: KeepOrderWhereUniqueInput, first: Int, last: Int): [KeepOrder!]!
  Keepstatus(after: KeepstatusWhereUniqueInput, before: KeepstatusWhereUniqueInput, first: Int, last: Int): [Keepstatus!]!
  LikesUser(after: LikesUserWhereUniqueInput, before: LikesUserWhereUniqueInput, first: Int, last: Int): [LikesUser!]!
  MvpFreeBoard(after: MvpFreeBoardWhereUniqueInput, before: MvpFreeBoardWhereUniqueInput, first: Int, last: Int): [MvpFreeBoard!]!
  MvpFreeLikesUser(after: MvpFreeLikesUserWhereUniqueInput, before: MvpFreeLikesUserWhereUniqueInput, first: Int, last: Int): [MvpFreeLikesUser!]!
  MvpFreeProduct(after: MvpFreeProductWhereUniqueInput, before: MvpFreeProductWhereUniqueInput, first: Int, last: Int): [MvpFreeProduct!]!
  MvpFreeProductCategory(after: MvpFreeProductCategoryWhereUniqueInput, before: MvpFreeProductCategoryWhereUniqueInput, first: Int, last: Int): [MvpFreeProductCategory!]!
  name: String
  Ordermanageitems(after: OrdermanageitemsWhereUniqueInput, before: OrdermanageitemsWhereUniqueInput, first: Int, last: Int): [Ordermanageitems!]!
  Paidproductlist(after: PaidproductlistWhereUniqueInput, before: PaidproductlistWhereUniqueInput, first: Int, last: Int): [Paidproductlist!]!
  phonenumber: String!
  point: String!
  ProductCategory(after: ProductCategoryWhereUniqueInput, before: ProductCategoryWhereUniqueInput, first: Int, last: Int): [ProductCategory!]!
  Productupdate(after: ProductupdateWhereUniqueInput, before: ProductupdateWhereUniqueInput, first: Int, last: Int): [Productupdate!]!
  Profile(after: ProfileWhereUniqueInput, before: ProfileWhereUniqueInput, first: Int, last: Int): [Profile!]!
  RecentlyViewd(after: RecentlyViewdWhereUniqueInput, before: RecentlyViewdWhereUniqueInput, first: Int, last: Int): [RecentlyViewd!]!
  RecieverOfChat(after: ChatWhereUniqueInput, before: ChatWhereUniqueInput, first: Int, last: Int): [Chat!]!
  recommendname: String!
  recommendphonenumber: String!
  sample1name: String!
  sample1phonenumber: String!
  sample2name: String!
  sample2phonenumber: String!
  SenderOfChat(after: ChatWhereUniqueInput, before: ChatWhereUniqueInput, first: Int, last: Int): [Chat!]!
  token: String
  user: User
  UserProfile(after: UserProfileWhereUniqueInput, before: UserProfileWhereUniqueInput, first: Int, last: Int): [UserProfile!]!
}

type UserProfile {
  bankaccount: String!
  bankname: String!
  businessnumber: String!
  contactemail: String!
  deposit: String!
  gsiid: String!
  id: Int!
  kakaoid: String!
  point: String!
}

input UserProfileListRelationFilter {
  every: UserProfileWhereInput
  none: UserProfileWhereInput
  some: UserProfileWhereInput
}

input UserProfileWhereInput {
  AND: [UserProfileWhereInput!]
  bankaccount: StringFilter
  bankname: StringFilter
  businessnumber: StringFilter
  contactemail: StringFilter
  createdAt: DateTimeFilter
  deposit: StringFilter
  gsiid: StringFilter
  id: IntFilter
  kakaoid: StringFilter
  NOT: [UserProfileWhereInput!]
  OR: [UserProfileWhereInput!]
  point: StringFilter
  User: UserWhereInput
  userId: IntNullableFilter
}

input UserProfileWhereUniqueInput {
  id: Int
}

input UserWhereInput {
  address: StringFilter
  AND: [UserWhereInput!]
  approved: StringFilter
  BeautyCategoryData: BeautyCategoryDataListRelationFilter
  BeautyCategoryDataDetails: BeautyCategoryDataDetailsListRelationFilter
  BeautyCategoryDataDetailsContents: BeautyCategoryDataDetailsContentsListRelationFilter
  BeautyCategoryDataDetailsImages: BeautyCategoryDataDetailsImagesListRelationFilter
  BeautyCategoryDataImages: BeautyCategoryDataImagesListRelationFilter
  BeautyLikesUser: BeautyLikesUserListRelationFilter
  Board: BoardListRelationFilter
  businesscard: StringFilter
  Changepoint: ChangepointListRelationFilter
  Checkpoint: CheckpointListRelationFilter
  comments: CommentListRelationFilter
  createdAt: DateTimeFilter
  deposit: StringFilter
  email: StringFilter
  Hashtag: HashtagListRelationFilter
  id: IntFilter
  isKakaoSavedId: StringFilter
  KeepOrder: KeepOrderListRelationFilter
  Keepstatus: KeepstatusListRelationFilter
  LikesUser: LikesUserListRelationFilter
  MvpFreeBoard: MvpFreeBoardListRelationFilter
  MvpFreeLikesUser: MvpFreeLikesUserListRelationFilter
  MvpFreeProduct: MvpFreeProductListRelationFilter
  MvpFreeProductCategory: MvpFreeProductCategoryListRelationFilter
  name: StringNullableFilter
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  Ordermanageitems: OrdermanageitemsListRelationFilter
  Paidproductlist: PaidproductlistListRelationFilter
  password: StringFilter
  phonenumber: StringFilter
  point: StringFilter
  Product: ProductListRelationFilter
  ProductCategory: ProductCategoryListRelationFilter
  Productupdate: ProductupdateListRelationFilter
  Profile: ProfileListRelationFilter
  RecentlyViewd: RecentlyViewdListRelationFilter
  RecieverOfChat: ChatListRelationFilter
  recommendname: StringFilter
  recommendphonenumber: StringFilter
  sample1name: StringFilter
  sample1phonenumber: StringFilter
  sample2name: StringFilter
  sample2phonenumber: StringFilter
  SenderOfChat: ChatListRelationFilter
  UserProfile: UserProfileListRelationFilter
}
