generator client {
  provider = "prisma-client-js"
}

datasource postgresql {
  provider = "postgresql"
  url = "***"
}




model User {
  id         Int          @id @default(autoincrement())
  email      String       @unique
  password   String       @default("")
  name       String?
  createdAt DateTime @default(now())
  phonenumber String       @default("")
   deposit   String       @default("0")
    point   String       @default("0")
    businesscard  String @default("")
  approved  String @default("yes")
recommendname  String @default("")
recommendphonenumber  String @default("")
sample1name  String @default("")
sample1phonenumber  String @default("")
sample2name  String @default("")
sample2phonenumber  String @default("")

 
  Profile    Profile[]


 UserProfile    UserProfile[]


 Checkpoint Checkpoint[]
Changepoint Changepoint[]


 Productupdate  Productupdate[]

Product  Product[]
Paidproductlist  Paidproductlist[]
Board Board[]

Ordermanageitems Ordermanageitems[]
LikesUser LikesUser[]

ProductCategory ProductCategory[]
Keepstatus Keepstatus[]
KeepOrder KeepOrder[]



}



model Profile {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  bio       String?
  location  String?
  website   String?
  avatar    String?
  userId    Int?     
  User      User?    @relation(fields: [userId], references: [id])
}

//jinsung

//maxi plan

model UserProfile {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  kakaoid       String
  gsiid  String
  bankname   String
  bankaccount    String
    businessnumber   String
  contactemail    String
   deposit    String
    point    String
  userId    Int?     
  User      User?    @relation(fields: [userId], references: [id])
}







model Checkpoint {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  marketname String?
  price String?
  image String?
  checkstatus String?

  userId    Int?    
  User      User?    @relation(fields: [userId], references: [id])
}

model Changepoint {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  price String?
  checkstatus String?
  userId    Int?    
  User      User?    @relation(fields: [userId], references: [id])
}



model Productupdate {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())


  prefix String?
  postfix String?


  userId    Int?    
  User      User?    @relation(fields: [userId], references: [id])
}



//project

model Product {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
   User      User?     @relation(fields: [userId], references: [id])
  userId    Int?
Productpage      Productpage?     @relation(fields: [productpageId], references: [id])
  productpageId    Int?
        title String
        description String
        type String
        brand String
        category String
        price Int
        newproduct String
        sale String
        stock String
        discount Int
        variants  String
        images  String

 always String  @default("no")
       
       }
       


model Productpage {
  id         Int          @id @default(autoincrement())
  text String
  Product  Product[]
     
}



model Ordermanageitems {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  product_main_image String?
  name String?
  shippingfee String @default("0")
  wholeamount String?
  keepingamount String?
  shipping_amount String?
  multiorder String?
  created_at String?
  updated_at String?
  item_price String?
  paidstatus String?
  productid Int?
  messagefromcustomer String @default("no")
  messagefromadmin String @default("no")
  Keepstatus Keepstatus[]
  userId    Int?    
  User      User?    @relation(fields: [userId], references: [id])
}

model Keepstatus {
  id      Int      @id @default(autoincrement())
  Ordermanageitems   Ordermanageitems    @relation(fields: [keepId], references: [id])
  createdAt DateTime @default(now())
  userId  Int?
  User    User?    @relation(fields: [userId], references: [id])
  keepId Int
  productId String?
  productName String?
  productPrice String?
  productQty String?
  productKeepQty String?
}



model KeepOrder {
  id      Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId  Int?
  User    User?    @relation(fields: [userId], references: [id])
  productId String?
  orderId String?
  productName String?
  productPrice String?
  productQty String?
  productKeepQty String?
  messagefromcustomer String @default("no")
  messagefromadmin String @default("no")
}




model Paidproductlist {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
   User      User?     @relation(fields: [userId], references: [id])
  userId    Int?
        productid Int?
        title String?
        category String?
        price String?
        discount String?
        images  String?
  wholeamount String?
    keepingamount String?
  shipping_amount String?
  updated_at String?
  orderstatus String?

       
       }

model LikesUser {
  id      Int      @id @default(autoincrement())
  Board   Board    @relation(fields: [boardId], references: [id])
  likedAt DateTime @default(now())
  userId  Int?
  User    User?    @relation(fields: [userId], references: [id])
  boardId Int
}

model Board {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
   User      User?     @relation(fields: [userId], references: [id])
  userId    Int?
  title String?
  contents String?
   images String?   
   likes String?   
    LikesUser     LikesUser[]
       }

       model ProductCategory {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
   User      User?     @relation(fields: [userId], references: [id])
  userId    Int?
  name String?
 
       }

